Program -> #MAIN Declaration_list $defMain #END_OF_FILE eof
Declaration_list -> Declaration Declaration_list
Declaration_list -> epsilon
Declaration -> Var_declaration
Var_declaration -> Type_specifier $createVar id  Var_dec_index
Var_dec_index -> $initial_Var ;
Var_dec_index -> [ $notVoid num $initialArray ] ;
Var_dec_index ->  Fun_declaration $BACK
Type_specifier -> $int int
Type_specifier -> $void void
Fun_declaration -> ( $createFunction  Params ) Compound_stmt  #ENDFUNCTION
Params -> $void void $push Param_name
Params -> int $int_createVar id  Param_index Param_loop
Param_name -> id Param_index Param_loop
Param_name -> $pop2 epsilon
Param_list ->  Param Param_loop
Param_loop -> , Param_list
Param_loop -> epsilon
Param -> Type_specifier $push id  Param_index
Param_index -> $initial_Var epsilon
Param_index -> $notVoid [ $initialPointer ]
Compound_stmt -> { $newScope Declaration_list #assign_First_Line Statement_list $endOfScope }
Statement_list ->  $expressionReset Statement $expressionReset Statement_list
Statement_list -> epsilon
Statement -> Expression_stmt
Statement -> Compound_stmt
Statement -> Selection_stmt
Statement -> Iteration_stmt $BACK
Statement -> Return_stmt
Statement -> Switch_stmt $BACK
Expression_stmt -> Expression #POP ;
Expression_stmt -> continue $continue #JP_FIRST ;
Expression_stmt -> break $break #JP_END ;
Expression_stmt -> ;
Selection_stmt -> if ( $expressionReset Expression $expressionIsNumeric ) #IF_JP Statement else #IF_SAVE_JP Statement #IF_SAVE
Iteration_stmt -> while $while #WHILE_START ( $expressionReset Expression $expressionIsNumeric ) #WHILE_JP  Statement #WHILE_END
Return_stmt -> return Return_expression $returnChecker #RETURN_FUNC
Return_expression -> $push_line #PUSH_NULL ;
Return_expression -> Expression ;
Switch_stmt -> switch $switch #SWITCH_START ( $expressionReset Expression $expressionIsNumeric ) #SWITCH_EXTRA_JP { $newScope Case_stmts Default_stmt $endOfScope } #SWITH_END
Case_stmts -> Case_stmt Case_stmts
Case_stmts -> epsilon #SWITCH_SAVE
Case_stmt -> case #PUSH_NUM num #SWITCH_SAVE_JP  : Statement_list #JUMPER
Default_stmt -> default : Statement_list
Default_stmt -> epsilon
Expression -> $push #PID id Expression_args
Expression -> Simple_Expression
Expression_args -> $findVar Expression_index #INDEXING Expression_relations
Expression_args -> $beginArgs ( #START_ARG Args $endArgs ) #CALING_FUNCTION Expression_times Expression_addops Expression_loop
Expression_relations -> = Expression $expressionIsNumeric #ASSIGN_PUSH epsilon
Expression_relations -> Expression_times Expression_addops Expression_loop
Expression_index -> epsilon  #PUSH_ZERO
Expression_index -> [ Expression ]
Expression_loop -> #PUSH_RELOP Relop Additive_expression #CALCULATE
Expression_loop -> epsilon
Relop -> <
Relop -> ==
Additive_expression -> Term Expression_addops
Expression_addops -> #ADDOP Addop Term Expression_addops #CALCULATE
Expression_addops -> epsilon
Addop -> +
Addop -> -
Term -> Signed_Factor Expression_times
Expression_times -> * Signed_Factor #MULT Expression_times
Expression_times -> epsilon
Signed_Factor -> Factor
Signed_Factor -> + Factor
Signed_Factor -> - Factor #GHARINE
Factor -> ( $expressionReset Expression $expressionIsNumeric )
Factor -> $push #PID id Factor_args
Factor -> #PUSH_NUM num
Factor_args -> $beginArgs ( #START_ARG Args $endArgs ) #CALING_FUNCTION
Factor_args -> $idIsNumeric Expression_index #INDEXING
Args ->  Arg_list
Args -> epsilon
Arg_list -> Expression $arg #ASSIGN_INPUT Args_loop
Args_loop -> , Expression $arg #ASSIGN_INPUT Args_loop
Args_loop -> epsilon
Simple_Expression -> Additive_expression_num Expression_loop
Additive_expression_num -> Term_num Expression_addops
Term_num -> Signed_Factor_num Expression_times
Signed_Factor_num -> Factor_num
Signed_Factor_num -> + Factor
Signed_Factor_num -> - Factor #GHARINE
Factor_num -> ( $expressionReset Expression $expressionIsNumeric )
Factor_num -> #PUSH_NUM num