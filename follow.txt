Program	-|
Declaration_list	EOF, EPSILON, {, continue, break, ;, if, while, return, switch, id, +, -, (, num
Declaration	EPSILON, int, void
Var_declaration	EPSILON, int, void
Var_dec_index	EPSILON, int, void
Type_specifier	id
Fun_declaration	EPSILON, int, void
Params	)
Param_name	)
Param_list	)
Param_loop	)
Param	,, EPSILON
Param_index	,, EPSILON
Compound_stmt	EPSILON, int, void, {, continue, break, ;, if, while, return, switch, id, +, -, (, num, else
Statement_list	}, EPSILON, case
Statement	EPSILON, {, continue, break, ;, if, while, return, switch, id, +, -, (, num, else
Expression_stmt	EPSILON, {, continue, break, ;, if, while, return, switch, id, +, -, (, num, else
Selection_stmt	EPSILON, {, continue, break, ;, if, while, return, switch, id, +, -, (, num, else
Iteration_stmt	EPSILON, {, continue, break, ;, if, while, return, switch, id, +, -, (, num, else
Return_stmt	EPSILON, {, continue, break, ;, if, while, return, switch, id, +, -, (, num, else
Return_expression	EPSILON, {, continue, break, ;, if, while, return, switch, id, +, -, (, num, else
Switch_stmt	EPSILON, {, continue, break, ;, if, while, return, switch, id, +, -, (, num, else
Case_stmts	default, EPSILON
Case_stmt	EPSILON, case
Default_stmt	}
Expression	;, ), ], ,, EPSILON
Expression_args	;, ), ], ,, EPSILON
Expression_relations	;, ), ], ,, EPSILON
Var	
Expression_index	=, *, EPSILON
Expression_loop	;, ), ], ,, EPSILON
Relop	+, -, (, id, num
Additive_expression	;, ), ], ,, EPSILON
Expression_addops	EPSILON, <, ==, ;, ), ], ,
Addop	+, -, (, id, num
Term	EPSILON, +, -
Expression_times	EPSILON, +, -
Signed_Factor	*, EPSILON
Factor	*, EPSILON
Factor_args	*, EPSILON
Call	
Args	)
Arg_list	)
Args_loop	)
Simple_Expression	;, ), ], ,, EPSILON
Additive_expression_num	EPSILON, <, ==
Term_num	EPSILON, +, -
Signed_Factor_num	*, EPSILON
Factor_num	*, EPSILON